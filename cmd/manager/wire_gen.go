// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/config"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/controller"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/managers/runnables"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/utils/reconcileutils"
	"k8s.io/client-go/kubernetes"
	config2 "sigs.k8s.io/controller-runtime/pkg/client/config"
)

// Injectors from wire.go:

func InitializeMarketplaceController() (*managers.ControllerMain, error) {
	controllerFlagSet := controller.ProvideControllerFlagSet()
	defaultCommandRunnerProvider := reconcileutils.ProvideDefaultCommandRunnerProvider()
	marketplaceController := controller.ProvideMarketplaceController(defaultCommandRunnerProvider)
	meterbaseController := controller.ProvideMeterbaseController(defaultCommandRunnerProvider)
	meterDefinitionController := controller.ProvideMeterDefinitionController(defaultCommandRunnerProvider)
	operatorConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	razeeDeployController := controller.ProvideRazeeDeployController(operatorConfig)
	olmSubscriptionController := controller.ProvideOlmSubscriptionController()
	meterReportController := controller.ProvideMeterReportController(defaultCommandRunnerProvider, operatorConfig)
	olmClusterServiceVersionController := controller.ProvideOlmClusterServiceVersionController()
	remoteResourceS3Controller := controller.ProvideRemoteResourceS3Controller()
	nodeController := controller.ProvideNodeController()
	clusterRegistrationController := controller.ProvideClusterRegistrationController()
	controllerList := controller.ProvideControllerList(marketplaceController, meterbaseController, meterDefinitionController, razeeDeployController, olmSubscriptionController, meterReportController, olmClusterServiceVersionController, remoteResourceS3Controller, nodeController, clusterRegistrationController)
	restConfig, err := config2.GetConfig()
	if err != nil {
		return nil, err
	}
	opsSrcSchemeDefinition := controller.ProvideOpsSrcScheme()
	monitoringSchemeDefinition := controller.ProvideMonitoringScheme()
	olmV1SchemeDefinition := controller.ProvideOLMV1Scheme()
	olmV1Alpha1SchemeDefinition := controller.ProvideOLMV1Alpha1Scheme()
	openshiftConfigV1SchemeDefinition := controller.ProvideOpenshiftConfigV1Scheme()
	localSchemes := controller.ProvideLocalSchemes(opsSrcSchemeDefinition, monitoringSchemeDefinition, olmV1SchemeDefinition, olmV1Alpha1SchemeDefinition, openshiftConfigV1SchemeDefinition)
	scheme, err := managers.ProvideScheme(restConfig, localSchemes)
	if err != nil {
		return nil, err
	}
	options, err := provideOptions(scheme)
	if err != nil {
		return nil, err
	}
	manager, err := managers.ProvideManager(restConfig, scheme, localSchemes, options)
	if err != nil {
		return nil, err
	}
	logrLogger := _wireLoggerValue
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	client := managers.ProvideManagerClient(manager)
	clientCommandRunner := reconcileutils.NewClientCommand(client, scheme, logrLogger)
	podMonitorConfig := providePodMonitorConfig()
	podMonitor := runnables.NewPodMonitor(logrLogger, clientset, clientCommandRunner, podMonitorConfig)
	controllerMain := makeMarketplaceController(controllerFlagSet, controllerList, manager, podMonitor)
	return controllerMain, nil
}

var (
	_wireLoggerValue = logger
)
